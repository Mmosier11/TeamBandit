// Function requirements
const jwt = require("jsonwebtoken");                
require("dotenv").config();                         

/**
 * Pulls JWT token from local storage and verifies that it is a valid JWT token. Appends the 
 * user_id of current request for use in other route functions.
 * 
 * 
 * @param {*} req HTTP request
 * @param {*} res HTTP response
 * @param {*} next As this is a middleware function, this calls the function that was originally called 
 * @returns Adds the user to req if user.id is valid
 */
module.exports = async(req, res, next) => {

    // Header is pulled from the local storage, as token should have the jwtToken information generated by login
    const jwtToken = req.header("token");
    
    if(!jwtToken)
    {
        return res.status(403).json({msg: "Authorization denied!"});
    }

    // Attempts to verify if the current token is valid, adds user_id to the request
    // so that we can grab use the user_id in our routes
    try {
        
        const payload = jwt.verify(jwtToken, process.env.jwtSecret);

        req.user = payload.user;
        next();
    } catch (error) {
        console.error(error.message);
        return res.status(401).json({msg: "Token is not valid!"});
    }
}